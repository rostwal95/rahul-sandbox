//
//Proto file with messages related to Agent Answers

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file suggestions.proto (package com.cisco.wcc.ccai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 *
 * Represents the AgentAnswerResult object with agent answer information
 *
 * @generated from message com.cisco.wcc.ccai.v1.AgentAnswerResult
 */
export class AgentAnswerResult extends Message<AgentAnswerResult> {
  /**
   * @generated from oneof com.cisco.wcc.ccai.v1.AgentAnswerResult.answer_oneof
   */
  answerOneof: {
    /**
     * Agent Answers
     *
     * @generated from field: com.cisco.wcc.ccai.v1.AgentAnswer agentanswer = 2;
     */
    value: AgentAnswer;
    case: "agentanswer";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AgentAnswerResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.cisco.wcc.ccai.v1.AgentAnswerResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "agentanswer", kind: "message", T: AgentAnswer, oneof: "answer_oneof" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentAnswerResult {
    return new AgentAnswerResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentAnswerResult {
    return new AgentAnswerResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentAnswerResult {
    return new AgentAnswerResult().fromJsonString(jsonString, options);
  }

  static equals(a: AgentAnswerResult | PlainMessage<AgentAnswerResult> | undefined, b: AgentAnswerResult | PlainMessage<AgentAnswerResult> | undefined): boolean {
    return proto3.util.equals(AgentAnswerResult, a, b);
  }
}

/**
 *
 * Represents the AgentAnswer object with answers and tags
 *
 * @generated from message com.cisco.wcc.ccai.v1.AgentAnswer
 */
export class AgentAnswer extends Message<AgentAnswer> {
  /**
   * List of answers
   *
   * @generated from field: repeated com.cisco.wcc.ccai.v1.Answer answers = 1;
   */
  answers: Answer[] = [];

  /**
   * List of tags
   *
   * @generated from field: repeated string tags = 2;
   */
  tags: string[] = [];

  constructor(data?: PartialMessage<AgentAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.cisco.wcc.ccai.v1.AgentAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answers", kind: "message", T: Answer, repeated: true },
    { no: 2, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AgentAnswer {
    return new AgentAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AgentAnswer {
    return new AgentAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AgentAnswer {
    return new AgentAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: AgentAnswer | PlainMessage<AgentAnswer> | undefined, b: AgentAnswer | PlainMessage<AgentAnswer> | undefined): boolean {
    return proto3.util.equals(AgentAnswer, a, b);
  }
}

/**
 *
 * Represents Answer which is cumulative response of FaqAnswer and ArticleAnswer
 *
 * @generated from message com.cisco.wcc.ccai.v1.Answer
 */
export class Answer extends Message<Answer> {
  /**
   * ArticleAnswer Field - title
   *
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * ArticleAnswer Field - uri
   *
   * @generated from field: string uri = 2;
   */
  uri = "";

  /**
   * ArticleAnswer Field - snippets
   *
   * @generated from field: repeated string snippets = 3;
   */
  snippets: string[] = [];

  /**
   * Faq Answer Field - description
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * Faq Answer Field - confidence
   *
   * @generated from field: float confidence = 5;
   */
  confidence = 0;

  /**
   * Faq Answer Field - source
   *
   * @generated from field: string source = 6;
   */
  source = "";

  /**
   * Common Field - metadata
   *
   * @generated from field: map<string, string> metadata = 7;
   */
  metadata: { [key: string]: string } = {};

  /**
   * Common Field - answer record
   *
   * @generated from field: string answer_record = 8;
   */
  answerRecord = "";

  /**
   * Common Fields - highlight
   *
   * @generated from field: repeated com.cisco.wcc.ccai.v1.range highlight = 9;
   */
  highlight: range[] = [];

  constructor(data?: PartialMessage<Answer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.cisco.wcc.ccai.v1.Answer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "snippets", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "confidence", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "answer_record", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "highlight", kind: "message", T: range, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Answer {
    return new Answer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJsonString(jsonString, options);
  }

  static equals(a: Answer | PlainMessage<Answer> | undefined, b: Answer | PlainMessage<Answer> | undefined): boolean {
    return proto3.util.equals(Answer, a, b);
  }
}

/**
 *
 * Represents the range object with start and end integer values
 *
 * @generated from message com.cisco.wcc.ccai.v1.range
 */
export class range extends Message<range> {
  /**
   * start
   *
   * @generated from field: int32 start = 1;
   */
  start = 0;

  /**
   * end
   *
   * @generated from field: int32 end = 2;
   */
  end = 0;

  constructor(data?: PartialMessage<range>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.cisco.wcc.ccai.v1.range";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): range {
    return new range().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): range {
    return new range().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): range {
    return new range().fromJsonString(jsonString, options);
  }

  static equals(a: range | PlainMessage<range> | undefined, b: range | PlainMessage<range> | undefined): boolean {
    return proto3.util.equals(range, a, b);
  }
}

