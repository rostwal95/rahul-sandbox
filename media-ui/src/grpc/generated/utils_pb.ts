//
//Proto file contains all the messages that can be used as utilities.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file utils.proto (package com.cisco.wcc.ccai.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 
 * Represents the CMS Config object to be passed to upstream services
 *
 * @generated from message com.cisco.wcc.ccai.v1.CmsConfig
 */
export class CmsConfig extends Message<CmsConfig> {
  /**
   * connector id from cms - E.g. 6225ef12-84f9-4ef0-ba67-5e45954c2945
   *
   * @generated from field: string connector_id = 1;
   */
  connectorId = "";

  /**
   * conversation profile id from cms - E.g. projects/ciscoss-dev-9gkv/conversationProfiles/rLyvp5sqSKCoczWEdMHiJA
   *
   * @generated from field: string conversation_profile_id = 2;
   */
  conversationProfileId = "";

  /**
   * default answers enabled / disabled - boolean value
   *
   * @generated from field: bool default_answers = 3;
   */
  defaultAnswers = false;

  /**
   * default virtual agent enabled / disabled - boolean value
   *
   * @generated from field: bool default_virtual_agent = 4;
   */
  defaultVirtualAgent = false;

  /**
   * description retrieved from cms - E.g. Google Connector\nProject Name: CiscoSS\nProfile Name: Gourav-cx\nAgent Name: Gourav
   *
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * unique identifier - E.g. 2e0ceae1-5aa4-420f-a640-39c7b36e8c70
   *
   * @generated from field: string id = 6;
   */
  id = "";

  /**
   * name of the config
   *
   * @generated from field: string name = 7;
   */
  name = "";

  /**
   * org id information - E.g. 1d6b8641-de43-4e8d-b88d-5b5e33e94fda
   *
   * @generated from field: string org_id = 8;
   */
  orgId = "";

  /**
   * type of the provider - E.g. Google or Nuance
   *
   * @generated from field: string type = 9;
   */
  type = "";

  /**
   * config object - can contain multiple key value pairs
   *
   * @generated from field: map<string, string> config = 10;
   */
  config: { [key: string]: string } = {};

  /**
   * product version - E.g. 2.0
   *
   * @generated from field: string product_version = 11;
   */
  productVersion = "";

  /**
   * @generated from field: bool system_default = 12;
   */
  systemDefault = false;

  constructor(data?: PartialMessage<CmsConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.cisco.wcc.ccai.v1.CmsConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "conversation_profile_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_answers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "default_virtual_agent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 11, name: "product_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "system_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CmsConfig {
    return new CmsConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CmsConfig {
    return new CmsConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CmsConfig {
    return new CmsConfig().fromJsonString(jsonString, options);
  }

  static equals(a: CmsConfig | PlainMessage<CmsConfig> | undefined, b: CmsConfig | PlainMessage<CmsConfig> | undefined): boolean {
    return proto3.util.equals(CmsConfig, a, b);
  }
}

/**
 * 
 * Describes the consumer information like home region details
 *
 * @generated from message com.cisco.wcc.ccai.v1.ConsumerInfo
 */
export class ConsumerInfo extends Message<ConsumerInfo> {
  /**
   * Represents WxCC Home Cluster Id the Call Belongs to
   *
   * @generated from field: string wxcc_cluster_id = 1;
   */
  wxccClusterId = "";

  /**
   * Client to pass its identification, this will be used to provide client specific functionalities by Connectors. e.g. "CCE-VVB-12.6", "WCC-RMS" etc.
   *
   * @generated from field: string user_agent = 2;
   */
  userAgent = "";

  /**
   * Identification number of the caller.
   *
   * @generated from field: string caller_id = 3;
   */
  callerId = "";

  /**
   * Number dialed/called by the customer.
   *
   * @generated from field: string destination_id = 4;
   */
  destinationId = "";

  constructor(data?: PartialMessage<ConsumerInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.cisco.wcc.ccai.v1.ConsumerInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "wxcc_cluster_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_agent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "caller_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "destination_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsumerInfo {
    return new ConsumerInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsumerInfo {
    return new ConsumerInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsumerInfo {
    return new ConsumerInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ConsumerInfo | PlainMessage<ConsumerInfo> | undefined, b: ConsumerInfo | PlainMessage<ConsumerInfo> | undefined): boolean {
    return proto3.util.equals(ConsumerInfo, a, b);
  }
}

