import { apiBase } from "@/lib/apiBase";
import { sendRUM } from "@/lib/rum";
import type { Metadata } from "next";
import RUMClient from "./rum-client";


export const revalidate = 60; // ISR

async function getData(slug: string) {
  const r = await fetch(
    `${apiBase()}/v1/pages/slug?slug=${encodeURIComponent(slug)}`,
    { next: { revalidate: 60 } },
  );
  if (!r.ok) return null;
  return r.json();
}

function RenderBlock({ block }: { block: any }) {
  // Simple HTML render (trusted content generated by our editor)
  return (
    <div
      className="my-6 prose max-w-none"
      dangerouslySetInnerHTML={{ __html: block.data_json?.html || "" }}
    />
  );
}

export async function generateMetadata({
  params,
}: {
  params: { slug: string };
}) {
  const title = `${params.slug} â€” Kit`;
  const og = `/api/og?title=${encodeURIComponent(params.slug)}`;
  return {
    title,
    openGraph: { images: [`/api/og?slug=${encodeURIComponent(params.slug)}`] },
    twitter: { images: [og] },
  } as any;
}

export default async function PublicPage({
  params,
}: {
  params: { slug: string };
}) {
  const page = await getData(params.slug);
  if (!page) return <main className="p-6">Not found</main>;
  const theme = page.theme_json || {};
  return (
    <main
      style={{
        background: theme.colors?.bg || "#fff",
        color: theme.colors?.ink || "#111",
      }}
      className="min-h-dvh"
    >
      <RUMClient slug={params.slug} />
      <div className="mx-auto max-w-3xl p-6">
        {(page.page_blocks || [])
          .sort((a: any, b: any) => a.order - b.order)
          .map((b: any) => (
            <RenderBlock key={b.id} block={b} />
          ))}
      </div>
    </main>
  );
}
